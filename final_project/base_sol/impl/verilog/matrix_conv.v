// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_conv,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.702000,HLS_SYN_LAT=1681,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=78,HLS_SYN_LUT=277,HLS_VERSION=2018_3}" *)

module matrix_conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [3:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [5:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg res_ce0;
reg res_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_1_fu_174_p2;
reg   [3:0] i_1_reg_361;
wire    ap_CS_fsm_state2;
wire   [7:0] tmp_10_cast_fu_188_p1;
reg   [7:0] tmp_10_cast_reg_366;
wire   [0:0] exitcond3_fu_168_p2;
wire   [3:0] j_1_fu_198_p2;
reg   [3:0] j_1_reg_374;
wire    ap_CS_fsm_state3;
wire   [1:0] m_1_fu_214_p2;
reg   [1:0] m_1_reg_382;
wire    ap_CS_fsm_state4;
wire   [7:0] tmp_11_fu_250_p2;
reg   [7:0] tmp_11_reg_387;
wire   [0:0] exitcond1_fu_208_p2;
wire   [4:0] tmp_13_fu_272_p2;
reg   [4:0] tmp_13_reg_392;
wire   [1:0] n_1_fu_302_p2;
reg   [1:0] n_1_reg_400;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_296_p2;
wire  signed [15:0] grp_fu_350_p3;
wire    ap_CS_fsm_state6;
reg   [3:0] i_reg_97;
wire   [0:0] exitcond2_fu_192_p2;
reg   [3:0] j_reg_109;
reg   [15:0] sum_reg_121;
reg   [1:0] m_reg_134;
reg   [15:0] sum_1_reg_145;
reg   [1:0] n_reg_157;
wire   [63:0] tmp_13_cast_fu_287_p1;
wire   [63:0] tmp_19_cast_fu_323_p1;
wire  signed [63:0] tmp_20_cast_fu_337_p1;
wire   [6:0] tmp_fu_180_p3;
wire   [3:0] m_cast4_fu_204_p1;
wire   [3:0] tmp_4_fu_220_p2;
wire   [6:0] tmp_9_fu_226_p3;
wire   [4:0] tmp_10_fu_238_p3;
wire   [7:0] p_shl2_cast_fu_246_p1;
wire   [7:0] p_shl1_cast_fu_234_p1;
wire   [3:0] tmp_12_fu_260_p3;
wire   [4:0] p_shl_cast_fu_268_p1;
wire   [4:0] tmp_6_cast_fu_256_p1;
wire   [7:0] tmp_2_cast_fu_278_p1;
wire   [7:0] tmp_2_fu_282_p2;
wire   [3:0] n_cast2_fu_292_p1;
wire   [3:0] tmp_8_fu_308_p2;
wire   [7:0] tmp_9_cast_fu_314_p1;
wire   [7:0] tmp_14_fu_318_p2;
wire   [4:0] tmp_1_cast_fu_328_p1;
wire   [4:0] tmp_15_fu_332_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

matrix_conv_mac_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrix_conv_mac_mbkb_U1(
    .din0(b_q0),
    .din1(a_q0),
    .din2(sum_1_reg_145),
    .dout(grp_fu_350_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_192_p2 == 1'd1))) begin
        i_reg_97 <= i_1_reg_361;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_97 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_109 <= j_1_reg_374;
    end else if (((exitcond3_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_109 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_296_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_reg_134 <= m_1_reg_382;
    end else if (((exitcond2_fu_192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_reg_134 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_reg_157 <= n_1_reg_400;
    end else if (((exitcond1_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        n_reg_157 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sum_1_reg_145 <= grp_fu_350_p3;
    end else if (((exitcond1_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sum_1_reg_145 <= sum_reg_121;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_296_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        sum_reg_121 <= sum_1_reg_145;
    end else if (((exitcond2_fu_192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sum_reg_121 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_361 <= i_1_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_374 <= j_1_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_1_reg_382 <= m_1_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        n_1_reg_400 <= n_1_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_10_cast_reg_366[6 : 3] <= tmp_10_cast_fu_188_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_11_reg_387[7 : 1] <= tmp_11_fu_250_p2[7 : 1];
        tmp_13_reg_392 <= tmp_13_fu_272_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_168_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_192_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond1_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_296_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = tmp_19_cast_fu_323_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign b_address0 = tmp_20_cast_fu_337_p1;

assign exitcond1_fu_208_p2 = ((m_reg_134 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_192_p2 = ((j_reg_109 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond3_fu_168_p2 = ((i_reg_97 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_fu_296_p2 = ((n_reg_157 == 2'd3) ? 1'b1 : 1'b0);

assign i_1_fu_174_p2 = (i_reg_97 + 4'd1);

assign j_1_fu_198_p2 = (j_reg_109 + 4'd1);

assign m_1_fu_214_p2 = (m_reg_134 + 2'd1);

assign m_cast4_fu_204_p1 = m_reg_134;

assign n_1_fu_302_p2 = (n_reg_157 + 2'd1);

assign n_cast2_fu_292_p1 = n_reg_157;

assign p_shl1_cast_fu_234_p1 = tmp_9_fu_226_p3;

assign p_shl2_cast_fu_246_p1 = tmp_10_fu_238_p3;

assign p_shl_cast_fu_268_p1 = tmp_12_fu_260_p3;

assign res_address0 = tmp_13_cast_fu_287_p1;

assign res_d0 = sum_reg_121;

assign tmp_10_cast_fu_188_p1 = tmp_fu_180_p3;

assign tmp_10_fu_238_p3 = {{tmp_4_fu_220_p2}, {1'd0}};

assign tmp_11_fu_250_p2 = (p_shl2_cast_fu_246_p1 + p_shl1_cast_fu_234_p1);

assign tmp_12_fu_260_p3 = {{m_reg_134}, {2'd0}};

assign tmp_13_cast_fu_287_p1 = tmp_2_fu_282_p2;

assign tmp_13_fu_272_p2 = (p_shl_cast_fu_268_p1 - tmp_6_cast_fu_256_p1);

assign tmp_14_fu_318_p2 = (tmp_11_reg_387 + tmp_9_cast_fu_314_p1);

assign tmp_15_fu_332_p2 = (tmp_13_reg_392 + tmp_1_cast_fu_328_p1);

assign tmp_19_cast_fu_323_p1 = tmp_14_fu_318_p2;

assign tmp_1_cast_fu_328_p1 = n_reg_157;

assign tmp_20_cast_fu_337_p1 = $signed(tmp_15_fu_332_p2);

assign tmp_2_cast_fu_278_p1 = j_reg_109;

assign tmp_2_fu_282_p2 = (tmp_10_cast_reg_366 + tmp_2_cast_fu_278_p1);

assign tmp_4_fu_220_p2 = (m_cast4_fu_204_p1 + i_reg_97);

assign tmp_6_cast_fu_256_p1 = m_reg_134;

assign tmp_8_fu_308_p2 = (n_cast2_fu_292_p1 + j_reg_109);

assign tmp_9_cast_fu_314_p1 = tmp_8_fu_308_p2;

assign tmp_9_fu_226_p3 = {{tmp_4_fu_220_p2}, {3'd0}};

assign tmp_fu_180_p3 = {{i_reg_97}, {3'd0}};

always @ (posedge ap_clk) begin
    tmp_10_cast_reg_366[2:0] <= 3'b000;
    tmp_10_cast_reg_366[7] <= 1'b0;
    tmp_11_reg_387[0] <= 1'b0;
end

endmodule //matrix_conv

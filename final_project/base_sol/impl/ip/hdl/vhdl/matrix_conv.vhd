-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrix_conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_conv,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.702000,HLS_SYN_LAT=1681,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=78,HLS_SYN_LUT=277,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_174_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_361 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_10_cast_fu_188_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_cast_reg_366 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond3_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_198_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_374 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal m_1_fu_214_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_1_reg_382 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_11_fu_250_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_387 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_272_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_reg_392 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_1_fu_302_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_1_reg_400 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_350_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_reg_97 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_109 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_reg_121 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_reg_134 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_145 : STD_LOGIC_VECTOR (15 downto 0);
    signal n_reg_157 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_cast_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_cast_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_180_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_cast4_fu_204_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_220_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_226_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_238_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_246_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_234_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_260_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_268_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_cast_fu_256_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_cast_fu_278_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_282_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_cast2_fu_292_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_308_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_cast_fu_314_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_cast_fu_328_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_fu_332_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component matrix_conv_mac_mbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    matrix_conv_mac_mbkb_U1 : component matrix_conv_mac_mbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => b_q0,
        din1 => a_q0,
        din2 => sum_1_reg_145,
        dout => grp_fu_350_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_192_p2 = ap_const_lv1_1))) then 
                i_reg_97 <= i_1_reg_361;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_97 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_109 <= j_1_reg_374;
            elsif (((exitcond3_fu_168_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_109 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    m_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                m_reg_134 <= m_1_reg_382;
            elsif (((exitcond2_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m_reg_134 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                n_reg_157 <= n_1_reg_400;
            elsif (((exitcond1_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                n_reg_157 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    sum_1_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                sum_1_reg_145 <= grp_fu_350_p3;
            elsif (((exitcond1_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                sum_1_reg_145 <= sum_reg_121;
            end if; 
        end if;
    end process;

    sum_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sum_reg_121 <= sum_1_reg_145;
            elsif (((exitcond2_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                sum_reg_121 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_361 <= i_1_fu_174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_374 <= j_1_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                m_1_reg_382 <= m_1_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                n_1_reg_400 <= n_1_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_168_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_10_cast_reg_366(6 downto 3) <= tmp_10_cast_fu_188_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_11_reg_387(7 downto 1) <= tmp_11_fu_250_p2(7 downto 1);
                tmp_13_reg_392 <= tmp_13_fu_272_p2;
            end if;
        end if;
    end process;
    tmp_10_cast_reg_366(2 downto 0) <= "000";
    tmp_10_cast_reg_366(7) <= '0';
    tmp_11_reg_387(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_168_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond1_fu_208_p2, ap_CS_fsm_state5, exitcond_fu_296_p2, exitcond2_fu_192_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_192_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond1_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond_fu_296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    a_address0 <= tmp_19_cast_fu_323_p1(7 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_168_p2)
    begin
        if (((exitcond3_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_168_p2)
    begin
        if (((exitcond3_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= tmp_20_cast_fu_337_p1(4 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_208_p2 <= "1" when (m_reg_134 = ap_const_lv2_3) else "0";
    exitcond2_fu_192_p2 <= "1" when (j_reg_109 = ap_const_lv4_8) else "0";
    exitcond3_fu_168_p2 <= "1" when (i_reg_97 = ap_const_lv4_8) else "0";
    exitcond_fu_296_p2 <= "1" when (n_reg_157 = ap_const_lv2_3) else "0";
    i_1_fu_174_p2 <= std_logic_vector(unsigned(i_reg_97) + unsigned(ap_const_lv4_1));
    j_1_fu_198_p2 <= std_logic_vector(unsigned(j_reg_109) + unsigned(ap_const_lv4_1));
    m_1_fu_214_p2 <= std_logic_vector(unsigned(m_reg_134) + unsigned(ap_const_lv2_1));
    m_cast4_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_134),4));
    n_1_fu_302_p2 <= std_logic_vector(unsigned(n_reg_157) + unsigned(ap_const_lv2_1));
    n_cast2_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_157),4));
    p_shl1_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_226_p3),8));
    p_shl2_cast_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_238_p3),8));
    p_shl_cast_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_260_p3),5));
    res_address0 <= tmp_13_cast_fu_287_p1(6 - 1 downto 0);

    res_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_d0 <= sum_reg_121;

    res_we0_assign_proc : process(ap_CS_fsm_state4, exitcond1_fu_208_p2)
    begin
        if (((exitcond1_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_cast_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_180_p3),8));
    tmp_10_fu_238_p3 <= (tmp_4_fu_220_p2 & ap_const_lv1_0);
    tmp_11_fu_250_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_246_p1) + unsigned(p_shl1_cast_fu_234_p1));
    tmp_12_fu_260_p3 <= (m_reg_134 & ap_const_lv2_0);
    tmp_13_cast_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_282_p2),64));
    tmp_13_fu_272_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_268_p1) - unsigned(tmp_6_cast_fu_256_p1));
    tmp_14_fu_318_p2 <= std_logic_vector(unsigned(tmp_11_reg_387) + unsigned(tmp_9_cast_fu_314_p1));
    tmp_15_fu_332_p2 <= std_logic_vector(unsigned(tmp_13_reg_392) + unsigned(tmp_1_cast_fu_328_p1));
    tmp_19_cast_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_318_p2),64));
    tmp_1_cast_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_157),5));
        tmp_20_cast_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_332_p2),64));

    tmp_2_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_109),8));
    tmp_2_fu_282_p2 <= std_logic_vector(unsigned(tmp_10_cast_reg_366) + unsigned(tmp_2_cast_fu_278_p1));
    tmp_4_fu_220_p2 <= std_logic_vector(unsigned(m_cast4_fu_204_p1) + unsigned(i_reg_97));
    tmp_6_cast_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_134),5));
    tmp_8_fu_308_p2 <= std_logic_vector(unsigned(n_cast2_fu_292_p1) + unsigned(j_reg_109));
    tmp_9_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_308_p2),8));
    tmp_9_fu_226_p3 <= (tmp_4_fu_220_p2 & ap_const_lv3_0);
    tmp_fu_180_p3 <= (i_reg_97 & ap_const_lv3_0);
end behav;

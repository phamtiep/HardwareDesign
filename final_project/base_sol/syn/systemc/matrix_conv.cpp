// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matrix_conv.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matrix_conv::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matrix_conv::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> matrix_conv::ap_ST_fsm_state1 = "1";
const sc_lv<6> matrix_conv::ap_ST_fsm_state2 = "10";
const sc_lv<6> matrix_conv::ap_ST_fsm_state3 = "100";
const sc_lv<6> matrix_conv::ap_ST_fsm_state4 = "1000";
const sc_lv<6> matrix_conv::ap_ST_fsm_state5 = "10000";
const sc_lv<6> matrix_conv::ap_ST_fsm_state6 = "100000";
const sc_lv<32> matrix_conv::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> matrix_conv::ap_const_lv32_1 = "1";
const sc_lv<1> matrix_conv::ap_const_lv1_0 = "0";
const sc_lv<32> matrix_conv::ap_const_lv32_2 = "10";
const sc_lv<32> matrix_conv::ap_const_lv32_3 = "11";
const sc_lv<32> matrix_conv::ap_const_lv32_4 = "100";
const sc_lv<32> matrix_conv::ap_const_lv32_5 = "101";
const sc_lv<4> matrix_conv::ap_const_lv4_0 = "0000";
const sc_lv<1> matrix_conv::ap_const_lv1_1 = "1";
const sc_lv<16> matrix_conv::ap_const_lv16_0 = "0000000000000000";
const sc_lv<2> matrix_conv::ap_const_lv2_0 = "00";
const sc_lv<4> matrix_conv::ap_const_lv4_8 = "1000";
const sc_lv<4> matrix_conv::ap_const_lv4_1 = "1";
const sc_lv<3> matrix_conv::ap_const_lv3_0 = "000";
const sc_lv<2> matrix_conv::ap_const_lv2_3 = "11";
const sc_lv<2> matrix_conv::ap_const_lv2_1 = "1";
const bool matrix_conv::ap_const_boolean_1 = true;

matrix_conv::matrix_conv(sc_module_name name) : sc_module(name), mVcdFile(0) {
    matrix_conv_mac_mbkb_U1 = new matrix_conv_mac_mbkb<1,1,8,8,16,16>("matrix_conv_mac_mbkb_U1");
    matrix_conv_mac_mbkb_U1->din0(b_q0);
    matrix_conv_mac_mbkb_U1->din1(a_q0);
    matrix_conv_mac_mbkb_U1->din2(sum_1_reg_145);
    matrix_conv_mac_mbkb_U1->dout(grp_fu_350_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_19_cast_fu_323_p1 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_168_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_168_p2 );

    SC_METHOD(thread_b_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_20_cast_fu_337_p1 );

    SC_METHOD(thread_b_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_exitcond1_fu_208_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( m_reg_134 );

    SC_METHOD(thread_exitcond2_fu_192_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_109 );

    SC_METHOD(thread_exitcond3_fu_168_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_97 );

    SC_METHOD(thread_exitcond_fu_296_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( n_reg_157 );

    SC_METHOD(thread_i_1_fu_174_p2);
    sensitive << ( i_reg_97 );

    SC_METHOD(thread_j_1_fu_198_p2);
    sensitive << ( j_reg_109 );

    SC_METHOD(thread_m_1_fu_214_p2);
    sensitive << ( m_reg_134 );

    SC_METHOD(thread_m_cast4_fu_204_p1);
    sensitive << ( m_reg_134 );

    SC_METHOD(thread_n_1_fu_302_p2);
    sensitive << ( n_reg_157 );

    SC_METHOD(thread_n_cast2_fu_292_p1);
    sensitive << ( n_reg_157 );

    SC_METHOD(thread_p_shl1_cast_fu_234_p1);
    sensitive << ( tmp_9_fu_226_p3 );

    SC_METHOD(thread_p_shl2_cast_fu_246_p1);
    sensitive << ( tmp_10_fu_238_p3 );

    SC_METHOD(thread_p_shl_cast_fu_268_p1);
    sensitive << ( tmp_12_fu_260_p3 );

    SC_METHOD(thread_res_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_13_cast_fu_287_p1 );

    SC_METHOD(thread_res_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_res_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( sum_reg_121 );

    SC_METHOD(thread_res_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_fu_208_p2 );

    SC_METHOD(thread_tmp_10_cast_fu_188_p1);
    sensitive << ( tmp_fu_180_p3 );

    SC_METHOD(thread_tmp_10_fu_238_p3);
    sensitive << ( tmp_4_fu_220_p2 );

    SC_METHOD(thread_tmp_11_fu_250_p2);
    sensitive << ( p_shl2_cast_fu_246_p1 );
    sensitive << ( p_shl1_cast_fu_234_p1 );

    SC_METHOD(thread_tmp_12_fu_260_p3);
    sensitive << ( m_reg_134 );

    SC_METHOD(thread_tmp_13_cast_fu_287_p1);
    sensitive << ( tmp_2_fu_282_p2 );

    SC_METHOD(thread_tmp_13_fu_272_p2);
    sensitive << ( p_shl_cast_fu_268_p1 );
    sensitive << ( tmp_6_cast_fu_256_p1 );

    SC_METHOD(thread_tmp_14_fu_318_p2);
    sensitive << ( tmp_11_reg_387 );
    sensitive << ( tmp_9_cast_fu_314_p1 );

    SC_METHOD(thread_tmp_15_fu_332_p2);
    sensitive << ( tmp_13_reg_392 );
    sensitive << ( tmp_1_cast_fu_328_p1 );

    SC_METHOD(thread_tmp_19_cast_fu_323_p1);
    sensitive << ( tmp_14_fu_318_p2 );

    SC_METHOD(thread_tmp_1_cast_fu_328_p1);
    sensitive << ( n_reg_157 );

    SC_METHOD(thread_tmp_20_cast_fu_337_p1);
    sensitive << ( tmp_15_fu_332_p2 );

    SC_METHOD(thread_tmp_2_cast_fu_278_p1);
    sensitive << ( j_reg_109 );

    SC_METHOD(thread_tmp_2_fu_282_p2);
    sensitive << ( tmp_10_cast_reg_366 );
    sensitive << ( tmp_2_cast_fu_278_p1 );

    SC_METHOD(thread_tmp_4_fu_220_p2);
    sensitive << ( i_reg_97 );
    sensitive << ( m_cast4_fu_204_p1 );

    SC_METHOD(thread_tmp_6_cast_fu_256_p1);
    sensitive << ( m_reg_134 );

    SC_METHOD(thread_tmp_8_fu_308_p2);
    sensitive << ( j_reg_109 );
    sensitive << ( n_cast2_fu_292_p1 );

    SC_METHOD(thread_tmp_9_cast_fu_314_p1);
    sensitive << ( tmp_8_fu_308_p2 );

    SC_METHOD(thread_tmp_9_fu_226_p3);
    sensitive << ( tmp_4_fu_220_p2 );

    SC_METHOD(thread_tmp_fu_180_p3);
    sensitive << ( i_reg_97 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_168_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_fu_208_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_296_p2 );
    sensitive << ( exitcond2_fu_192_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matrix_conv_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_q0, "(port)a_q0");
    sc_trace(mVcdFile, b_address0, "(port)b_address0");
    sc_trace(mVcdFile, b_ce0, "(port)b_ce0");
    sc_trace(mVcdFile, b_q0, "(port)b_q0");
    sc_trace(mVcdFile, res_address0, "(port)res_address0");
    sc_trace(mVcdFile, res_ce0, "(port)res_ce0");
    sc_trace(mVcdFile, res_we0, "(port)res_we0");
    sc_trace(mVcdFile, res_d0, "(port)res_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_1_fu_174_p2, "i_1_fu_174_p2");
    sc_trace(mVcdFile, i_1_reg_361, "i_1_reg_361");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_10_cast_fu_188_p1, "tmp_10_cast_fu_188_p1");
    sc_trace(mVcdFile, tmp_10_cast_reg_366, "tmp_10_cast_reg_366");
    sc_trace(mVcdFile, exitcond3_fu_168_p2, "exitcond3_fu_168_p2");
    sc_trace(mVcdFile, j_1_fu_198_p2, "j_1_fu_198_p2");
    sc_trace(mVcdFile, j_1_reg_374, "j_1_reg_374");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, m_1_fu_214_p2, "m_1_fu_214_p2");
    sc_trace(mVcdFile, m_1_reg_382, "m_1_reg_382");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_11_fu_250_p2, "tmp_11_fu_250_p2");
    sc_trace(mVcdFile, tmp_11_reg_387, "tmp_11_reg_387");
    sc_trace(mVcdFile, exitcond1_fu_208_p2, "exitcond1_fu_208_p2");
    sc_trace(mVcdFile, tmp_13_fu_272_p2, "tmp_13_fu_272_p2");
    sc_trace(mVcdFile, tmp_13_reg_392, "tmp_13_reg_392");
    sc_trace(mVcdFile, n_1_fu_302_p2, "n_1_fu_302_p2");
    sc_trace(mVcdFile, n_1_reg_400, "n_1_reg_400");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exitcond_fu_296_p2, "exitcond_fu_296_p2");
    sc_trace(mVcdFile, grp_fu_350_p3, "grp_fu_350_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_reg_97, "i_reg_97");
    sc_trace(mVcdFile, exitcond2_fu_192_p2, "exitcond2_fu_192_p2");
    sc_trace(mVcdFile, j_reg_109, "j_reg_109");
    sc_trace(mVcdFile, sum_reg_121, "sum_reg_121");
    sc_trace(mVcdFile, m_reg_134, "m_reg_134");
    sc_trace(mVcdFile, sum_1_reg_145, "sum_1_reg_145");
    sc_trace(mVcdFile, n_reg_157, "n_reg_157");
    sc_trace(mVcdFile, tmp_13_cast_fu_287_p1, "tmp_13_cast_fu_287_p1");
    sc_trace(mVcdFile, tmp_19_cast_fu_323_p1, "tmp_19_cast_fu_323_p1");
    sc_trace(mVcdFile, tmp_20_cast_fu_337_p1, "tmp_20_cast_fu_337_p1");
    sc_trace(mVcdFile, tmp_fu_180_p3, "tmp_fu_180_p3");
    sc_trace(mVcdFile, m_cast4_fu_204_p1, "m_cast4_fu_204_p1");
    sc_trace(mVcdFile, tmp_4_fu_220_p2, "tmp_4_fu_220_p2");
    sc_trace(mVcdFile, tmp_9_fu_226_p3, "tmp_9_fu_226_p3");
    sc_trace(mVcdFile, tmp_10_fu_238_p3, "tmp_10_fu_238_p3");
    sc_trace(mVcdFile, p_shl2_cast_fu_246_p1, "p_shl2_cast_fu_246_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_234_p1, "p_shl1_cast_fu_234_p1");
    sc_trace(mVcdFile, tmp_12_fu_260_p3, "tmp_12_fu_260_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_268_p1, "p_shl_cast_fu_268_p1");
    sc_trace(mVcdFile, tmp_6_cast_fu_256_p1, "tmp_6_cast_fu_256_p1");
    sc_trace(mVcdFile, tmp_2_cast_fu_278_p1, "tmp_2_cast_fu_278_p1");
    sc_trace(mVcdFile, tmp_2_fu_282_p2, "tmp_2_fu_282_p2");
    sc_trace(mVcdFile, n_cast2_fu_292_p1, "n_cast2_fu_292_p1");
    sc_trace(mVcdFile, tmp_8_fu_308_p2, "tmp_8_fu_308_p2");
    sc_trace(mVcdFile, tmp_9_cast_fu_314_p1, "tmp_9_cast_fu_314_p1");
    sc_trace(mVcdFile, tmp_14_fu_318_p2, "tmp_14_fu_318_p2");
    sc_trace(mVcdFile, tmp_1_cast_fu_328_p1, "tmp_1_cast_fu_328_p1");
    sc_trace(mVcdFile, tmp_15_fu_332_p2, "tmp_15_fu_332_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("matrix_conv.hdltvin.dat");
    mHdltvoutHandle.open("matrix_conv.hdltvout.dat");
}

matrix_conv::~matrix_conv() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete matrix_conv_mac_mbkb_U1;
}

void matrix_conv::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_192_p2.read(), ap_const_lv1_1))) {
        i_reg_97 = i_1_reg_361.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_97 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_208_p2.read(), ap_const_lv1_1))) {
        j_reg_109 = j_1_reg_374.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond3_fu_168_p2.read(), ap_const_lv1_0))) {
        j_reg_109 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_296_p2.read(), ap_const_lv1_1))) {
        m_reg_134 = m_1_reg_382.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_192_p2.read()))) {
        m_reg_134 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        n_reg_157 = n_1_reg_400.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_208_p2.read()))) {
        n_reg_157 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sum_1_reg_145 = grp_fu_350_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_208_p2.read()))) {
        sum_1_reg_145 = sum_reg_121.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_296_p2.read(), ap_const_lv1_1))) {
        sum_reg_121 = sum_1_reg_145.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_192_p2.read()))) {
        sum_reg_121 = ap_const_lv16_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_361 = i_1_fu_174_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_1_reg_374 = j_1_fu_198_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        m_1_reg_382 = m_1_fu_214_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        n_1_reg_400 = n_1_fu_302_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond3_fu_168_p2.read(), ap_const_lv1_0))) {
        tmp_10_cast_reg_366 = tmp_10_cast_fu_188_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_208_p2.read()))) {
        tmp_11_reg_387 = tmp_11_fu_250_p2.read();
        tmp_13_reg_392 = tmp_13_fu_272_p2.read();
    }
}

void matrix_conv::thread_a_address0() {
    a_address0 =  (sc_lv<7>) (tmp_19_cast_fu_323_p1.read());
}

void matrix_conv::thread_a_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void matrix_conv::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void matrix_conv::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void matrix_conv::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void matrix_conv::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void matrix_conv::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void matrix_conv::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void matrix_conv::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond3_fu_168_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void matrix_conv::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void matrix_conv::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond3_fu_168_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void matrix_conv::thread_b_address0() {
    b_address0 =  (sc_lv<4>) (tmp_20_cast_fu_337_p1.read());
}

void matrix_conv::thread_b_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        b_ce0 = ap_const_logic_1;
    } else {
        b_ce0 = ap_const_logic_0;
    }
}

void matrix_conv::thread_exitcond1_fu_208_p2() {
    exitcond1_fu_208_p2 = (!m_reg_134.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(m_reg_134.read() == ap_const_lv2_3);
}

void matrix_conv::thread_exitcond2_fu_192_p2() {
    exitcond2_fu_192_p2 = (!j_reg_109.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_109.read() == ap_const_lv4_8);
}

void matrix_conv::thread_exitcond3_fu_168_p2() {
    exitcond3_fu_168_p2 = (!i_reg_97.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_97.read() == ap_const_lv4_8);
}

void matrix_conv::thread_exitcond_fu_296_p2() {
    exitcond_fu_296_p2 = (!n_reg_157.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(n_reg_157.read() == ap_const_lv2_3);
}

void matrix_conv::thread_i_1_fu_174_p2() {
    i_1_fu_174_p2 = (!i_reg_97.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_97.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void matrix_conv::thread_j_1_fu_198_p2() {
    j_1_fu_198_p2 = (!j_reg_109.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j_reg_109.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void matrix_conv::thread_m_1_fu_214_p2() {
    m_1_fu_214_p2 = (!m_reg_134.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(m_reg_134.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void matrix_conv::thread_m_cast4_fu_204_p1() {
    m_cast4_fu_204_p1 = esl_zext<4,2>(m_reg_134.read());
}

void matrix_conv::thread_n_1_fu_302_p2() {
    n_1_fu_302_p2 = (!n_reg_157.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(n_reg_157.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void matrix_conv::thread_n_cast2_fu_292_p1() {
    n_cast2_fu_292_p1 = esl_zext<4,2>(n_reg_157.read());
}

void matrix_conv::thread_p_shl1_cast_fu_234_p1() {
    p_shl1_cast_fu_234_p1 = esl_zext<8,7>(tmp_9_fu_226_p3.read());
}

void matrix_conv::thread_p_shl2_cast_fu_246_p1() {
    p_shl2_cast_fu_246_p1 = esl_zext<8,5>(tmp_10_fu_238_p3.read());
}

void matrix_conv::thread_p_shl_cast_fu_268_p1() {
    p_shl_cast_fu_268_p1 = esl_zext<5,4>(tmp_12_fu_260_p3.read());
}

void matrix_conv::thread_res_address0() {
    res_address0 =  (sc_lv<6>) (tmp_13_cast_fu_287_p1.read());
}

void matrix_conv::thread_res_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        res_ce0 = ap_const_logic_1;
    } else {
        res_ce0 = ap_const_logic_0;
    }
}

void matrix_conv::thread_res_d0() {
    res_d0 = sum_reg_121.read();
}

void matrix_conv::thread_res_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_208_p2.read(), ap_const_lv1_1))) {
        res_we0 = ap_const_logic_1;
    } else {
        res_we0 = ap_const_logic_0;
    }
}

void matrix_conv::thread_tmp_10_cast_fu_188_p1() {
    tmp_10_cast_fu_188_p1 = esl_zext<8,7>(tmp_fu_180_p3.read());
}

void matrix_conv::thread_tmp_10_fu_238_p3() {
    tmp_10_fu_238_p3 = esl_concat<4,1>(tmp_4_fu_220_p2.read(), ap_const_lv1_0);
}

void matrix_conv::thread_tmp_11_fu_250_p2() {
    tmp_11_fu_250_p2 = (!p_shl2_cast_fu_246_p1.read().is_01() || !p_shl1_cast_fu_234_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(p_shl2_cast_fu_246_p1.read()) + sc_biguint<8>(p_shl1_cast_fu_234_p1.read()));
}

void matrix_conv::thread_tmp_12_fu_260_p3() {
    tmp_12_fu_260_p3 = esl_concat<2,2>(m_reg_134.read(), ap_const_lv2_0);
}

void matrix_conv::thread_tmp_13_cast_fu_287_p1() {
    tmp_13_cast_fu_287_p1 = esl_zext<64,8>(tmp_2_fu_282_p2.read());
}

void matrix_conv::thread_tmp_13_fu_272_p2() {
    tmp_13_fu_272_p2 = (!p_shl_cast_fu_268_p1.read().is_01() || !tmp_6_cast_fu_256_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_shl_cast_fu_268_p1.read()) - sc_biguint<5>(tmp_6_cast_fu_256_p1.read()));
}

void matrix_conv::thread_tmp_14_fu_318_p2() {
    tmp_14_fu_318_p2 = (!tmp_11_reg_387.read().is_01() || !tmp_9_cast_fu_314_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(tmp_11_reg_387.read()) + sc_biguint<8>(tmp_9_cast_fu_314_p1.read()));
}

void matrix_conv::thread_tmp_15_fu_332_p2() {
    tmp_15_fu_332_p2 = (!tmp_13_reg_392.read().is_01() || !tmp_1_cast_fu_328_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_13_reg_392.read()) + sc_biguint<5>(tmp_1_cast_fu_328_p1.read()));
}

void matrix_conv::thread_tmp_19_cast_fu_323_p1() {
    tmp_19_cast_fu_323_p1 = esl_zext<64,8>(tmp_14_fu_318_p2.read());
}

void matrix_conv::thread_tmp_1_cast_fu_328_p1() {
    tmp_1_cast_fu_328_p1 = esl_zext<5,2>(n_reg_157.read());
}

void matrix_conv::thread_tmp_20_cast_fu_337_p1() {
    tmp_20_cast_fu_337_p1 = esl_sext<64,5>(tmp_15_fu_332_p2.read());
}

void matrix_conv::thread_tmp_2_cast_fu_278_p1() {
    tmp_2_cast_fu_278_p1 = esl_zext<8,4>(j_reg_109.read());
}

void matrix_conv::thread_tmp_2_fu_282_p2() {
    tmp_2_fu_282_p2 = (!tmp_10_cast_reg_366.read().is_01() || !tmp_2_cast_fu_278_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(tmp_10_cast_reg_366.read()) + sc_biguint<8>(tmp_2_cast_fu_278_p1.read()));
}

void matrix_conv::thread_tmp_4_fu_220_p2() {
    tmp_4_fu_220_p2 = (!m_cast4_fu_204_p1.read().is_01() || !i_reg_97.read().is_01())? sc_lv<4>(): (sc_biguint<4>(m_cast4_fu_204_p1.read()) + sc_biguint<4>(i_reg_97.read()));
}

void matrix_conv::thread_tmp_6_cast_fu_256_p1() {
    tmp_6_cast_fu_256_p1 = esl_zext<5,2>(m_reg_134.read());
}

void matrix_conv::thread_tmp_8_fu_308_p2() {
    tmp_8_fu_308_p2 = (!n_cast2_fu_292_p1.read().is_01() || !j_reg_109.read().is_01())? sc_lv<4>(): (sc_biguint<4>(n_cast2_fu_292_p1.read()) + sc_biguint<4>(j_reg_109.read()));
}

void matrix_conv::thread_tmp_9_cast_fu_314_p1() {
    tmp_9_cast_fu_314_p1 = esl_zext<8,4>(tmp_8_fu_308_p2.read());
}

void matrix_conv::thread_tmp_9_fu_226_p3() {
    tmp_9_fu_226_p3 = esl_concat<4,3>(tmp_4_fu_220_p2.read(), ap_const_lv3_0);
}

void matrix_conv::thread_tmp_fu_180_p3() {
    tmp_fu_180_p3 = esl_concat<4,3>(i_reg_97.read(), ap_const_lv3_0);
}

void matrix_conv::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond3_fu_168_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond2_fu_192_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond1_fu_208_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond_fu_296_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void matrix_conv::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address0\" :  \"" << a_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce0\" :  \"" << a_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_q0\" :  \"" << a_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address0\" :  \"" << b_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce0\" :  \"" << b_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_q0\" :  \"" << b_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_address0\" :  \"" << res_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_ce0\" :  \"" << res_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_we0\" :  \"" << res_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_d0\" :  \"" << res_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


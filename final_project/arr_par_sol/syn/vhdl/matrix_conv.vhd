-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_0_ce0 : OUT STD_LOGIC;
    a_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_1_ce0 : OUT STD_LOGIC;
    a_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_2_ce0 : OUT STD_LOGIC;
    a_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_3_ce0 : OUT STD_LOGIC;
    a_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_4_ce0 : OUT STD_LOGIC;
    a_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_5_ce0 : OUT STD_LOGIC;
    a_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_6_ce0 : OUT STD_LOGIC;
    a_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_7_ce0 : OUT STD_LOGIC;
    a_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_8_ce0 : OUT STD_LOGIC;
    a_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_9_ce0 : OUT STD_LOGIC;
    a_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_0_ce0 : OUT STD_LOGIC;
    b_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_1_ce0 : OUT STD_LOGIC;
    b_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_2_ce0 : OUT STD_LOGIC;
    b_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    res_0_ce0 : OUT STD_LOGIC;
    res_0_we0 : OUT STD_LOGIC;
    res_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    res_1_ce0 : OUT STD_LOGIC;
    res_1_we0 : OUT STD_LOGIC;
    res_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    res_2_ce0 : OUT STD_LOGIC;
    res_2_we0 : OUT STD_LOGIC;
    res_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    res_3_ce0 : OUT STD_LOGIC;
    res_3_we0 : OUT STD_LOGIC;
    res_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    res_4_ce0 : OUT STD_LOGIC;
    res_4_we0 : OUT STD_LOGIC;
    res_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    res_5_ce0 : OUT STD_LOGIC;
    res_5_we0 : OUT STD_LOGIC;
    res_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    res_6_ce0 : OUT STD_LOGIC;
    res_6_we0 : OUT STD_LOGIC;
    res_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    res_7_ce0 : OUT STD_LOGIC;
    res_7_we0 : OUT STD_LOGIC;
    res_7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrix_conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_conv,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=2321,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=87,HLS_SYN_LUT=238,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_460_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_613 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_12_fu_466_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_reg_618 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond3_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_476_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_625 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal m_1_fu_488_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_1_reg_633 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_4_t_fu_498_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_t_reg_638 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_fu_526_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_1_reg_646 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_559_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_716 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_11_fu_584_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_721 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_602_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_reg_375 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_387 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sum_reg_399 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_reg_419 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_431 : STD_LOGIC_VECTOR (15 downto 0);
    signal n_reg_443 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_494_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_cast2_fu_516_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_532_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component matrix_conv_mux_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component matrix_conv_mux_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component matrix_conv_mac_mdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    matrix_conv_mux_1bkb_U1 : component matrix_conv_mux_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => a_0_q0,
        din1 => a_1_q0,
        din2 => a_2_q0,
        din3 => a_3_q0,
        din4 => a_4_q0,
        din5 => a_5_q0,
        din6 => a_6_q0,
        din7 => a_7_q0,
        din8 => a_8_q0,
        din9 => a_9_q0,
        din10 => tmp_4_t_reg_638,
        dout => tmp_10_fu_559_p12);

    matrix_conv_mux_3cud_U2 : component matrix_conv_mux_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => b_0_q0,
        din1 => b_1_q0,
        din2 => b_2_q0,
        din3 => m_reg_419,
        dout => tmp_11_fu_584_p5);

    matrix_conv_mac_mdEe_U3 : component matrix_conv_mac_mdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_11_reg_721,
        din1 => tmp_10_reg_716,
        din2 => sum_1_reg_431,
        dout => grp_fu_602_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_375 <= i_1_reg_613;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_375 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_387 <= j_1_reg_625;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_454_p2 = ap_const_lv1_0))) then 
                j_reg_387 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    m_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_520_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                m_reg_419 <= m_1_reg_633;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_470_p2 = ap_const_lv1_0))) then 
                m_reg_419 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                n_reg_443 <= n_1_reg_646;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_482_p2 = ap_const_lv1_0))) then 
                n_reg_443 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    sum_1_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sum_1_reg_431 <= grp_fu_602_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_482_p2 = ap_const_lv1_0))) then 
                sum_1_reg_431 <= sum_reg_399;
            end if; 
        end if;
    end process;

    sum_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_520_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sum_reg_399 <= sum_1_reg_431;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_470_p2 = ap_const_lv1_0))) then 
                sum_reg_399 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_613 <= i_1_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_625 <= j_1_fu_476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                m_1_reg_633 <= m_1_fu_488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                n_1_reg_646 <= n_1_fu_526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_10_reg_716 <= tmp_10_fu_559_p12;
                tmp_11_reg_721 <= tmp_11_fu_584_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_454_p2 = ap_const_lv1_0))) then
                tmp_12_reg_618 <= tmp_12_fu_466_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_482_p2 = ap_const_lv1_0))) then
                tmp_4_t_reg_638 <= tmp_4_t_fu_498_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_454_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond1_fu_482_p2, ap_CS_fsm_state5, exitcond_fu_520_p2, exitcond2_fu_470_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_454_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_482_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond_fu_520_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    a_0_address0 <= tmp_9_fu_538_p1(4 - 1 downto 0);

    a_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_0_ce0 <= ap_const_logic_1;
        else 
            a_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_1_address0 <= tmp_9_fu_538_p1(4 - 1 downto 0);

    a_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_1_ce0 <= ap_const_logic_1;
        else 
            a_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_2_address0 <= tmp_9_fu_538_p1(4 - 1 downto 0);

    a_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_2_ce0 <= ap_const_logic_1;
        else 
            a_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_3_address0 <= tmp_9_fu_538_p1(4 - 1 downto 0);

    a_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_3_ce0 <= ap_const_logic_1;
        else 
            a_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_4_address0 <= tmp_9_fu_538_p1(4 - 1 downto 0);

    a_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_4_ce0 <= ap_const_logic_1;
        else 
            a_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_5_address0 <= tmp_9_fu_538_p1(4 - 1 downto 0);

    a_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_5_ce0 <= ap_const_logic_1;
        else 
            a_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_6_address0 <= tmp_9_fu_538_p1(4 - 1 downto 0);

    a_6_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_6_ce0 <= ap_const_logic_1;
        else 
            a_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_7_address0 <= tmp_9_fu_538_p1(4 - 1 downto 0);

    a_7_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_7_ce0 <= ap_const_logic_1;
        else 
            a_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_8_address0 <= tmp_9_fu_538_p1(4 - 1 downto 0);

    a_8_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_8_ce0 <= ap_const_logic_1;
        else 
            a_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_9_address0 <= tmp_9_fu_538_p1(4 - 1 downto 0);

    a_9_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_9_ce0 <= ap_const_logic_1;
        else 
            a_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_454_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_454_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_454_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_454_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_0_address0 <= tmp_1_fu_552_p1(2 - 1 downto 0);

    b_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_0_ce0 <= ap_const_logic_1;
        else 
            b_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_1_address0 <= tmp_1_fu_552_p1(2 - 1 downto 0);

    b_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_1_ce0 <= ap_const_logic_1;
        else 
            b_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_2_address0 <= tmp_1_fu_552_p1(2 - 1 downto 0);

    b_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_2_ce0 <= ap_const_logic_1;
        else 
            b_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_482_p2 <= "1" when (m_reg_419 = ap_const_lv2_3) else "0";
    exitcond2_fu_470_p2 <= "1" when (j_reg_387 = ap_const_lv4_8) else "0";
    exitcond3_fu_454_p2 <= "1" when (i_reg_375 = ap_const_lv4_8) else "0";
    exitcond_fu_520_p2 <= "1" when (n_reg_443 = ap_const_lv2_3) else "0";
    i_1_fu_460_p2 <= std_logic_vector(unsigned(i_reg_375) + unsigned(ap_const_lv4_1));
    j_1_fu_476_p2 <= std_logic_vector(unsigned(j_reg_387) + unsigned(ap_const_lv4_1));
    m_1_fu_488_p2 <= std_logic_vector(unsigned(m_reg_419) + unsigned(ap_const_lv2_1));
    n_1_fu_526_p2 <= std_logic_vector(unsigned(n_reg_443) + unsigned(ap_const_lv2_1));
    n_cast2_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_443),4));
    res_0_address0 <= tmp_2_fu_504_p1(3 - 1 downto 0);

    res_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_0_ce0 <= ap_const_logic_1;
        else 
            res_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_0_d0 <= sum_reg_399;

    res_0_we0_assign_proc : process(tmp_12_reg_618, ap_CS_fsm_state4, exitcond1_fu_482_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_482_p2 = ap_const_lv1_1) and (tmp_12_reg_618 = ap_const_lv3_0))) then 
            res_0_we0 <= ap_const_logic_1;
        else 
            res_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_1_address0 <= tmp_2_fu_504_p1(3 - 1 downto 0);

    res_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_1_ce0 <= ap_const_logic_1;
        else 
            res_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_1_d0 <= sum_reg_399;

    res_1_we0_assign_proc : process(tmp_12_reg_618, ap_CS_fsm_state4, exitcond1_fu_482_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_482_p2 = ap_const_lv1_1) and (tmp_12_reg_618 = ap_const_lv3_1))) then 
            res_1_we0 <= ap_const_logic_1;
        else 
            res_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_2_address0 <= tmp_2_fu_504_p1(3 - 1 downto 0);

    res_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_2_ce0 <= ap_const_logic_1;
        else 
            res_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_2_d0 <= sum_reg_399;

    res_2_we0_assign_proc : process(tmp_12_reg_618, ap_CS_fsm_state4, exitcond1_fu_482_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_482_p2 = ap_const_lv1_1) and (tmp_12_reg_618 = ap_const_lv3_2))) then 
            res_2_we0 <= ap_const_logic_1;
        else 
            res_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_3_address0 <= tmp_2_fu_504_p1(3 - 1 downto 0);

    res_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_3_ce0 <= ap_const_logic_1;
        else 
            res_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_3_d0 <= sum_reg_399;

    res_3_we0_assign_proc : process(tmp_12_reg_618, ap_CS_fsm_state4, exitcond1_fu_482_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_482_p2 = ap_const_lv1_1) and (tmp_12_reg_618 = ap_const_lv3_3))) then 
            res_3_we0 <= ap_const_logic_1;
        else 
            res_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_4_address0 <= tmp_2_fu_504_p1(3 - 1 downto 0);

    res_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_4_ce0 <= ap_const_logic_1;
        else 
            res_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_4_d0 <= sum_reg_399;

    res_4_we0_assign_proc : process(tmp_12_reg_618, ap_CS_fsm_state4, exitcond1_fu_482_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_482_p2 = ap_const_lv1_1) and (tmp_12_reg_618 = ap_const_lv3_4))) then 
            res_4_we0 <= ap_const_logic_1;
        else 
            res_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_5_address0 <= tmp_2_fu_504_p1(3 - 1 downto 0);

    res_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_5_ce0 <= ap_const_logic_1;
        else 
            res_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_5_d0 <= sum_reg_399;

    res_5_we0_assign_proc : process(tmp_12_reg_618, ap_CS_fsm_state4, exitcond1_fu_482_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_482_p2 = ap_const_lv1_1) and (tmp_12_reg_618 = ap_const_lv3_5))) then 
            res_5_we0 <= ap_const_logic_1;
        else 
            res_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_6_address0 <= tmp_2_fu_504_p1(3 - 1 downto 0);

    res_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_6_ce0 <= ap_const_logic_1;
        else 
            res_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_6_d0 <= sum_reg_399;

    res_6_we0_assign_proc : process(tmp_12_reg_618, ap_CS_fsm_state4, exitcond1_fu_482_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_482_p2 = ap_const_lv1_1) and (tmp_12_reg_618 = ap_const_lv3_6))) then 
            res_6_we0 <= ap_const_logic_1;
        else 
            res_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_7_address0 <= tmp_2_fu_504_p1(3 - 1 downto 0);

    res_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_7_ce0 <= ap_const_logic_1;
        else 
            res_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_7_d0 <= sum_reg_399;

    res_7_we0_assign_proc : process(tmp_12_reg_618, ap_CS_fsm_state4, exitcond1_fu_482_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_482_p2 = ap_const_lv1_1) and (tmp_12_reg_618 = ap_const_lv3_7))) then 
            res_7_we0 <= ap_const_logic_1;
        else 
            res_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_12_fu_466_p1 <= i_reg_375(3 - 1 downto 0);
    tmp_1_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_443),64));
    tmp_2_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_387),64));
    tmp_4_t_fu_498_p2 <= std_logic_vector(unsigned(tmp_6_fu_494_p1) + unsigned(i_reg_375));
    tmp_6_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_419),4));
    tmp_8_fu_532_p2 <= std_logic_vector(unsigned(n_cast2_fu_516_p1) + unsigned(j_reg_387));
    tmp_9_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_532_p2),64));
end behav;

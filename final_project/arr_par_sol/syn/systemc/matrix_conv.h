// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matrix_conv_HH_
#define _matrix_conv_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "matrix_conv_mux_1bkb.h"
#include "matrix_conv_mux_3cud.h"
#include "matrix_conv_mac_mdEe.h"

namespace ap_rtl {

struct matrix_conv : public sc_module {
    // Port declarations 77
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > a_0_address0;
    sc_out< sc_logic > a_0_ce0;
    sc_in< sc_lv<8> > a_0_q0;
    sc_out< sc_lv<4> > a_1_address0;
    sc_out< sc_logic > a_1_ce0;
    sc_in< sc_lv<8> > a_1_q0;
    sc_out< sc_lv<4> > a_2_address0;
    sc_out< sc_logic > a_2_ce0;
    sc_in< sc_lv<8> > a_2_q0;
    sc_out< sc_lv<4> > a_3_address0;
    sc_out< sc_logic > a_3_ce0;
    sc_in< sc_lv<8> > a_3_q0;
    sc_out< sc_lv<4> > a_4_address0;
    sc_out< sc_logic > a_4_ce0;
    sc_in< sc_lv<8> > a_4_q0;
    sc_out< sc_lv<4> > a_5_address0;
    sc_out< sc_logic > a_5_ce0;
    sc_in< sc_lv<8> > a_5_q0;
    sc_out< sc_lv<4> > a_6_address0;
    sc_out< sc_logic > a_6_ce0;
    sc_in< sc_lv<8> > a_6_q0;
    sc_out< sc_lv<4> > a_7_address0;
    sc_out< sc_logic > a_7_ce0;
    sc_in< sc_lv<8> > a_7_q0;
    sc_out< sc_lv<4> > a_8_address0;
    sc_out< sc_logic > a_8_ce0;
    sc_in< sc_lv<8> > a_8_q0;
    sc_out< sc_lv<4> > a_9_address0;
    sc_out< sc_logic > a_9_ce0;
    sc_in< sc_lv<8> > a_9_q0;
    sc_out< sc_lv<2> > b_0_address0;
    sc_out< sc_logic > b_0_ce0;
    sc_in< sc_lv<8> > b_0_q0;
    sc_out< sc_lv<2> > b_1_address0;
    sc_out< sc_logic > b_1_ce0;
    sc_in< sc_lv<8> > b_1_q0;
    sc_out< sc_lv<2> > b_2_address0;
    sc_out< sc_logic > b_2_ce0;
    sc_in< sc_lv<8> > b_2_q0;
    sc_out< sc_lv<3> > res_0_address0;
    sc_out< sc_logic > res_0_ce0;
    sc_out< sc_logic > res_0_we0;
    sc_out< sc_lv<16> > res_0_d0;
    sc_out< sc_lv<3> > res_1_address0;
    sc_out< sc_logic > res_1_ce0;
    sc_out< sc_logic > res_1_we0;
    sc_out< sc_lv<16> > res_1_d0;
    sc_out< sc_lv<3> > res_2_address0;
    sc_out< sc_logic > res_2_ce0;
    sc_out< sc_logic > res_2_we0;
    sc_out< sc_lv<16> > res_2_d0;
    sc_out< sc_lv<3> > res_3_address0;
    sc_out< sc_logic > res_3_ce0;
    sc_out< sc_logic > res_3_we0;
    sc_out< sc_lv<16> > res_3_d0;
    sc_out< sc_lv<3> > res_4_address0;
    sc_out< sc_logic > res_4_ce0;
    sc_out< sc_logic > res_4_we0;
    sc_out< sc_lv<16> > res_4_d0;
    sc_out< sc_lv<3> > res_5_address0;
    sc_out< sc_logic > res_5_ce0;
    sc_out< sc_logic > res_5_we0;
    sc_out< sc_lv<16> > res_5_d0;
    sc_out< sc_lv<3> > res_6_address0;
    sc_out< sc_logic > res_6_ce0;
    sc_out< sc_logic > res_6_we0;
    sc_out< sc_lv<16> > res_6_d0;
    sc_out< sc_lv<3> > res_7_address0;
    sc_out< sc_logic > res_7_ce0;
    sc_out< sc_logic > res_7_we0;
    sc_out< sc_lv<16> > res_7_d0;


    // Module declarations
    matrix_conv(sc_module_name name);
    SC_HAS_PROCESS(matrix_conv);

    ~matrix_conv();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    matrix_conv_mux_1bkb<1,1,8,8,8,8,8,8,8,8,8,8,4,8>* matrix_conv_mux_1bkb_U1;
    matrix_conv_mux_3cud<1,1,8,8,8,2,8>* matrix_conv_mux_3cud_U2;
    matrix_conv_mac_mdEe<1,1,8,8,16,16>* matrix_conv_mac_mdEe_U3;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > i_1_fu_460_p2;
    sc_signal< sc_lv<4> > i_1_reg_613;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<3> > tmp_12_fu_466_p1;
    sc_signal< sc_lv<3> > tmp_12_reg_618;
    sc_signal< sc_lv<1> > exitcond3_fu_454_p2;
    sc_signal< sc_lv<4> > j_1_fu_476_p2;
    sc_signal< sc_lv<4> > j_1_reg_625;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<2> > m_1_fu_488_p2;
    sc_signal< sc_lv<2> > m_1_reg_633;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<4> > tmp_4_t_fu_498_p2;
    sc_signal< sc_lv<4> > tmp_4_t_reg_638;
    sc_signal< sc_lv<1> > exitcond1_fu_482_p2;
    sc_signal< sc_lv<2> > n_1_fu_526_p2;
    sc_signal< sc_lv<2> > n_1_reg_646;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > exitcond_fu_520_p2;
    sc_signal< sc_lv<8> > tmp_10_fu_559_p12;
    sc_signal< sc_lv<8> > tmp_10_reg_716;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<8> > tmp_11_fu_584_p5;
    sc_signal< sc_lv<8> > tmp_11_reg_721;
    sc_signal< sc_lv<16> > grp_fu_602_p3;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<4> > i_reg_375;
    sc_signal< sc_lv<1> > exitcond2_fu_470_p2;
    sc_signal< sc_lv<4> > j_reg_387;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<16> > sum_reg_399;
    sc_signal< sc_lv<2> > m_reg_419;
    sc_signal< sc_lv<16> > sum_1_reg_431;
    sc_signal< sc_lv<2> > n_reg_443;
    sc_signal< sc_lv<64> > tmp_2_fu_504_p1;
    sc_signal< sc_lv<64> > tmp_9_fu_538_p1;
    sc_signal< sc_lv<64> > tmp_1_fu_552_p1;
    sc_signal< sc_lv<4> > tmp_6_fu_494_p1;
    sc_signal< sc_lv<4> > n_cast2_fu_516_p1;
    sc_signal< sc_lv<4> > tmp_8_fu_532_p2;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_7;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_0_address0();
    void thread_a_0_ce0();
    void thread_a_1_address0();
    void thread_a_1_ce0();
    void thread_a_2_address0();
    void thread_a_2_ce0();
    void thread_a_3_address0();
    void thread_a_3_ce0();
    void thread_a_4_address0();
    void thread_a_4_ce0();
    void thread_a_5_address0();
    void thread_a_5_ce0();
    void thread_a_6_address0();
    void thread_a_6_ce0();
    void thread_a_7_address0();
    void thread_a_7_ce0();
    void thread_a_8_address0();
    void thread_a_8_ce0();
    void thread_a_9_address0();
    void thread_a_9_ce0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_b_0_address0();
    void thread_b_0_ce0();
    void thread_b_1_address0();
    void thread_b_1_ce0();
    void thread_b_2_address0();
    void thread_b_2_ce0();
    void thread_exitcond1_fu_482_p2();
    void thread_exitcond2_fu_470_p2();
    void thread_exitcond3_fu_454_p2();
    void thread_exitcond_fu_520_p2();
    void thread_i_1_fu_460_p2();
    void thread_j_1_fu_476_p2();
    void thread_m_1_fu_488_p2();
    void thread_n_1_fu_526_p2();
    void thread_n_cast2_fu_516_p1();
    void thread_res_0_address0();
    void thread_res_0_ce0();
    void thread_res_0_d0();
    void thread_res_0_we0();
    void thread_res_1_address0();
    void thread_res_1_ce0();
    void thread_res_1_d0();
    void thread_res_1_we0();
    void thread_res_2_address0();
    void thread_res_2_ce0();
    void thread_res_2_d0();
    void thread_res_2_we0();
    void thread_res_3_address0();
    void thread_res_3_ce0();
    void thread_res_3_d0();
    void thread_res_3_we0();
    void thread_res_4_address0();
    void thread_res_4_ce0();
    void thread_res_4_d0();
    void thread_res_4_we0();
    void thread_res_5_address0();
    void thread_res_5_ce0();
    void thread_res_5_d0();
    void thread_res_5_we0();
    void thread_res_6_address0();
    void thread_res_6_ce0();
    void thread_res_6_d0();
    void thread_res_6_we0();
    void thread_res_7_address0();
    void thread_res_7_ce0();
    void thread_res_7_d0();
    void thread_res_7_we0();
    void thread_tmp_12_fu_466_p1();
    void thread_tmp_1_fu_552_p1();
    void thread_tmp_2_fu_504_p1();
    void thread_tmp_4_t_fu_498_p2();
    void thread_tmp_6_fu_494_p1();
    void thread_tmp_8_fu_532_p2();
    void thread_tmp_9_fu_538_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif

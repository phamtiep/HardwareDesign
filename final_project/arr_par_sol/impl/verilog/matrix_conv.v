// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_conv,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=2321,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=87,HLS_SYN_LUT=238,HLS_VERSION=2018_3}" *)

module matrix_conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_address0,
        a_0_ce0,
        a_0_q0,
        a_1_address0,
        a_1_ce0,
        a_1_q0,
        a_2_address0,
        a_2_ce0,
        a_2_q0,
        a_3_address0,
        a_3_ce0,
        a_3_q0,
        a_4_address0,
        a_4_ce0,
        a_4_q0,
        a_5_address0,
        a_5_ce0,
        a_5_q0,
        a_6_address0,
        a_6_ce0,
        a_6_q0,
        a_7_address0,
        a_7_ce0,
        a_7_q0,
        a_8_address0,
        a_8_ce0,
        a_8_q0,
        a_9_address0,
        a_9_ce0,
        a_9_q0,
        b_0_address0,
        b_0_ce0,
        b_0_q0,
        b_1_address0,
        b_1_ce0,
        b_1_q0,
        b_2_address0,
        b_2_ce0,
        b_2_q0,
        res_0_address0,
        res_0_ce0,
        res_0_we0,
        res_0_d0,
        res_1_address0,
        res_1_ce0,
        res_1_we0,
        res_1_d0,
        res_2_address0,
        res_2_ce0,
        res_2_we0,
        res_2_d0,
        res_3_address0,
        res_3_ce0,
        res_3_we0,
        res_3_d0,
        res_4_address0,
        res_4_ce0,
        res_4_we0,
        res_4_d0,
        res_5_address0,
        res_5_ce0,
        res_5_we0,
        res_5_d0,
        res_6_address0,
        res_6_ce0,
        res_6_we0,
        res_6_d0,
        res_7_address0,
        res_7_ce0,
        res_7_we0,
        res_7_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_0_address0;
output   a_0_ce0;
input  [7:0] a_0_q0;
output  [3:0] a_1_address0;
output   a_1_ce0;
input  [7:0] a_1_q0;
output  [3:0] a_2_address0;
output   a_2_ce0;
input  [7:0] a_2_q0;
output  [3:0] a_3_address0;
output   a_3_ce0;
input  [7:0] a_3_q0;
output  [3:0] a_4_address0;
output   a_4_ce0;
input  [7:0] a_4_q0;
output  [3:0] a_5_address0;
output   a_5_ce0;
input  [7:0] a_5_q0;
output  [3:0] a_6_address0;
output   a_6_ce0;
input  [7:0] a_6_q0;
output  [3:0] a_7_address0;
output   a_7_ce0;
input  [7:0] a_7_q0;
output  [3:0] a_8_address0;
output   a_8_ce0;
input  [7:0] a_8_q0;
output  [3:0] a_9_address0;
output   a_9_ce0;
input  [7:0] a_9_q0;
output  [1:0] b_0_address0;
output   b_0_ce0;
input  [7:0] b_0_q0;
output  [1:0] b_1_address0;
output   b_1_ce0;
input  [7:0] b_1_q0;
output  [1:0] b_2_address0;
output   b_2_ce0;
input  [7:0] b_2_q0;
output  [2:0] res_0_address0;
output   res_0_ce0;
output   res_0_we0;
output  [15:0] res_0_d0;
output  [2:0] res_1_address0;
output   res_1_ce0;
output   res_1_we0;
output  [15:0] res_1_d0;
output  [2:0] res_2_address0;
output   res_2_ce0;
output   res_2_we0;
output  [15:0] res_2_d0;
output  [2:0] res_3_address0;
output   res_3_ce0;
output   res_3_we0;
output  [15:0] res_3_d0;
output  [2:0] res_4_address0;
output   res_4_ce0;
output   res_4_we0;
output  [15:0] res_4_d0;
output  [2:0] res_5_address0;
output   res_5_ce0;
output   res_5_we0;
output  [15:0] res_5_d0;
output  [2:0] res_6_address0;
output   res_6_ce0;
output   res_6_we0;
output  [15:0] res_6_d0;
output  [2:0] res_7_address0;
output   res_7_ce0;
output   res_7_we0;
output  [15:0] res_7_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_0_ce0;
reg a_1_ce0;
reg a_2_ce0;
reg a_3_ce0;
reg a_4_ce0;
reg a_5_ce0;
reg a_6_ce0;
reg a_7_ce0;
reg a_8_ce0;
reg a_9_ce0;
reg b_0_ce0;
reg b_1_ce0;
reg b_2_ce0;
reg res_0_ce0;
reg res_0_we0;
reg res_1_ce0;
reg res_1_we0;
reg res_2_ce0;
reg res_2_we0;
reg res_3_ce0;
reg res_3_we0;
reg res_4_ce0;
reg res_4_we0;
reg res_5_ce0;
reg res_5_we0;
reg res_6_ce0;
reg res_6_we0;
reg res_7_ce0;
reg res_7_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_1_fu_460_p2;
reg   [3:0] i_1_reg_613;
wire    ap_CS_fsm_state2;
wire   [2:0] tmp_12_fu_466_p1;
reg   [2:0] tmp_12_reg_618;
wire   [0:0] exitcond3_fu_454_p2;
wire   [3:0] j_1_fu_476_p2;
reg   [3:0] j_1_reg_625;
wire    ap_CS_fsm_state3;
wire   [1:0] m_1_fu_488_p2;
reg   [1:0] m_1_reg_633;
wire    ap_CS_fsm_state4;
wire   [3:0] tmp_4_t_fu_498_p2;
reg   [3:0] tmp_4_t_reg_638;
wire   [0:0] exitcond1_fu_482_p2;
wire   [1:0] n_1_fu_526_p2;
reg   [1:0] n_1_reg_646;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_520_p2;
wire   [7:0] tmp_10_fu_559_p12;
reg  signed [7:0] tmp_10_reg_716;
wire    ap_CS_fsm_state6;
wire   [7:0] tmp_11_fu_584_p5;
reg  signed [7:0] tmp_11_reg_721;
wire  signed [15:0] grp_fu_602_p3;
wire    ap_CS_fsm_state7;
reg   [3:0] i_reg_375;
wire   [0:0] exitcond2_fu_470_p2;
reg   [3:0] j_reg_387;
wire    ap_CS_fsm_state8;
reg   [15:0] sum_reg_399;
reg   [1:0] m_reg_419;
reg   [15:0] sum_1_reg_431;
reg   [1:0] n_reg_443;
wire   [63:0] tmp_2_fu_504_p1;
wire   [63:0] tmp_9_fu_538_p1;
wire   [63:0] tmp_1_fu_552_p1;
wire   [3:0] tmp_6_fu_494_p1;
wire   [3:0] n_cast2_fu_516_p1;
wire   [3:0] tmp_8_fu_532_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

matrix_conv_mux_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
matrix_conv_mux_1bkb_U1(
    .din0(a_0_q0),
    .din1(a_1_q0),
    .din2(a_2_q0),
    .din3(a_3_q0),
    .din4(a_4_q0),
    .din5(a_5_q0),
    .din6(a_6_q0),
    .din7(a_7_q0),
    .din8(a_8_q0),
    .din9(a_9_q0),
    .din10(tmp_4_t_reg_638),
    .dout(tmp_10_fu_559_p12)
);

matrix_conv_mux_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
matrix_conv_mux_3cud_U2(
    .din0(b_0_q0),
    .din1(b_1_q0),
    .din2(b_2_q0),
    .din3(m_reg_419),
    .dout(tmp_11_fu_584_p5)
);

matrix_conv_mac_mdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrix_conv_mac_mdEe_U3(
    .din0(tmp_11_reg_721),
    .din1(tmp_10_reg_716),
    .din2(sum_1_reg_431),
    .dout(grp_fu_602_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_470_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_375 <= i_1_reg_613;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_375 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_387 <= j_1_reg_625;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_454_p2 == 1'd0))) begin
        j_reg_387 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_520_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_reg_419 <= m_1_reg_633;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_470_p2 == 1'd0))) begin
        m_reg_419 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n_reg_443 <= n_1_reg_646;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_482_p2 == 1'd0))) begin
        n_reg_443 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sum_1_reg_431 <= grp_fu_602_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_482_p2 == 1'd0))) begin
        sum_1_reg_431 <= sum_reg_399;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_520_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        sum_reg_399 <= sum_1_reg_431;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_470_p2 == 1'd0))) begin
        sum_reg_399 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_613 <= i_1_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_625 <= j_1_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_1_reg_633 <= m_1_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        n_1_reg_646 <= n_1_fu_526_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_10_reg_716 <= tmp_10_fu_559_p12;
        tmp_11_reg_721 <= tmp_11_fu_584_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_454_p2 == 1'd0))) begin
        tmp_12_reg_618 <= tmp_12_fu_466_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_482_p2 == 1'd0))) begin
        tmp_4_t_reg_638 <= tmp_4_t_fu_498_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_0_ce0 = 1'b1;
    end else begin
        a_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_1_ce0 = 1'b1;
    end else begin
        a_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_2_ce0 = 1'b1;
    end else begin
        a_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_3_ce0 = 1'b1;
    end else begin
        a_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_4_ce0 = 1'b1;
    end else begin
        a_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_5_ce0 = 1'b1;
    end else begin
        a_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_6_ce0 = 1'b1;
    end else begin
        a_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_7_ce0 = 1'b1;
    end else begin
        a_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_8_ce0 = 1'b1;
    end else begin
        a_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_9_ce0 = 1'b1;
    end else begin
        a_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_454_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_454_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_0_ce0 = 1'b1;
    end else begin
        b_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_1_ce0 = 1'b1;
    end else begin
        b_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_2_ce0 = 1'b1;
    end else begin
        b_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_0_ce0 = 1'b1;
    end else begin
        res_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_482_p2 == 1'd1) & (tmp_12_reg_618 == 3'd0))) begin
        res_0_we0 = 1'b1;
    end else begin
        res_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_1_ce0 = 1'b1;
    end else begin
        res_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_482_p2 == 1'd1) & (tmp_12_reg_618 == 3'd1))) begin
        res_1_we0 = 1'b1;
    end else begin
        res_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_2_ce0 = 1'b1;
    end else begin
        res_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_482_p2 == 1'd1) & (tmp_12_reg_618 == 3'd2))) begin
        res_2_we0 = 1'b1;
    end else begin
        res_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_3_ce0 = 1'b1;
    end else begin
        res_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_482_p2 == 1'd1) & (tmp_12_reg_618 == 3'd3))) begin
        res_3_we0 = 1'b1;
    end else begin
        res_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_4_ce0 = 1'b1;
    end else begin
        res_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_482_p2 == 1'd1) & (tmp_12_reg_618 == 3'd4))) begin
        res_4_we0 = 1'b1;
    end else begin
        res_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_5_ce0 = 1'b1;
    end else begin
        res_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_482_p2 == 1'd1) & (tmp_12_reg_618 == 3'd5))) begin
        res_5_we0 = 1'b1;
    end else begin
        res_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_6_ce0 = 1'b1;
    end else begin
        res_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_482_p2 == 1'd1) & (tmp_12_reg_618 == 3'd6))) begin
        res_6_we0 = 1'b1;
    end else begin
        res_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_7_ce0 = 1'b1;
    end else begin
        res_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_482_p2 == 1'd1) & (tmp_12_reg_618 == 3'd7))) begin
        res_7_we0 = 1'b1;
    end else begin
        res_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_454_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_470_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_482_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_520_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_address0 = tmp_9_fu_538_p1;

assign a_1_address0 = tmp_9_fu_538_p1;

assign a_2_address0 = tmp_9_fu_538_p1;

assign a_3_address0 = tmp_9_fu_538_p1;

assign a_4_address0 = tmp_9_fu_538_p1;

assign a_5_address0 = tmp_9_fu_538_p1;

assign a_6_address0 = tmp_9_fu_538_p1;

assign a_7_address0 = tmp_9_fu_538_p1;

assign a_8_address0 = tmp_9_fu_538_p1;

assign a_9_address0 = tmp_9_fu_538_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign b_0_address0 = tmp_1_fu_552_p1;

assign b_1_address0 = tmp_1_fu_552_p1;

assign b_2_address0 = tmp_1_fu_552_p1;

assign exitcond1_fu_482_p2 = ((m_reg_419 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_470_p2 = ((j_reg_387 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond3_fu_454_p2 = ((i_reg_375 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_fu_520_p2 = ((n_reg_443 == 2'd3) ? 1'b1 : 1'b0);

assign i_1_fu_460_p2 = (i_reg_375 + 4'd1);

assign j_1_fu_476_p2 = (j_reg_387 + 4'd1);

assign m_1_fu_488_p2 = (m_reg_419 + 2'd1);

assign n_1_fu_526_p2 = (n_reg_443 + 2'd1);

assign n_cast2_fu_516_p1 = n_reg_443;

assign res_0_address0 = tmp_2_fu_504_p1;

assign res_0_d0 = sum_reg_399;

assign res_1_address0 = tmp_2_fu_504_p1;

assign res_1_d0 = sum_reg_399;

assign res_2_address0 = tmp_2_fu_504_p1;

assign res_2_d0 = sum_reg_399;

assign res_3_address0 = tmp_2_fu_504_p1;

assign res_3_d0 = sum_reg_399;

assign res_4_address0 = tmp_2_fu_504_p1;

assign res_4_d0 = sum_reg_399;

assign res_5_address0 = tmp_2_fu_504_p1;

assign res_5_d0 = sum_reg_399;

assign res_6_address0 = tmp_2_fu_504_p1;

assign res_6_d0 = sum_reg_399;

assign res_7_address0 = tmp_2_fu_504_p1;

assign res_7_d0 = sum_reg_399;

assign tmp_12_fu_466_p1 = i_reg_375[2:0];

assign tmp_1_fu_552_p1 = n_reg_443;

assign tmp_2_fu_504_p1 = j_reg_387;

assign tmp_4_t_fu_498_p2 = (tmp_6_fu_494_p1 + i_reg_375);

assign tmp_6_fu_494_p1 = m_reg_419;

assign tmp_8_fu_532_p2 = (n_cast2_fu_516_p1 + j_reg_387);

assign tmp_9_fu_538_p1 = tmp_8_fu_532_p2;

endmodule //matrix_conv
